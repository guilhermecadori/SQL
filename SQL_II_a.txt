---- Part II: SQL Joins
Database Normalization

When creating a database, it is really important to think about how data will be stored. This is known as normalization, and it is a huge part of most SQL classes. If you are in charge of setting up a new database, it is important to have a thorough understanding of database normalization.

There are essentially three ideas that are aimed at database normalization:

    Are the tables storing logical groupings of the data?
    Can I make changes in a single location, rather than in many tables for the same information?
    Can I access and manipulate data quickly and efficiently?

This is discussed in detail here.

However, most analysts are working with a database that was already set up with the necessary properties in place. As analysts of data, you don't really need to think too much about data normalization. You just need to be able to pull the data from the database, so you can start making insights. This will be our focus in this lesson.


-- Introduction to JOINs
SELECT orders.*
FROM orders
JOIN accounts
ON orders.account_id = accounts.id;

As we've learned, the SELECT clause indicates which column(s) of data you'd like to see in the output (For Example, orders. gives us all the columns in orders table in the output). The FROM clause indicates the first table from which we're pulling data, and the JOIN indicates the second table. The ON* clause specifies the column on which you'd like to merge the two tables together.

What to Notice
We are able to pull data from two tables: orders and accounts
Above, we are only pulling data from the orders table since in the SELECT statement we only reference columns from the orders table.

1. Try pulling all the data from the accounts table, and all the data from the orders table.

2. Try pulling standard_qty, gloss_qty, and poster_qty from the orders table, and the website and the primary_poc from the accounts table.

-- Query 1
SELECT *
FROM accounts
JOIN orders
ON accounts.id = orders.account_id;

-- Query 2
SELECT 
    o.standard_qty,
    o.gloss_qty,
    o.poster_qty,
    a.website,
    a.primary_poc 
FROM accounts a
JOIN orders o
ON a.id = o.account_id;

1. Provide a table for all web_events associated with account name of Walmart. There should be three columns. Be sure to include the primary_poc, time of the event, and the channel for each event. Additionally, you might choose to add a fourth column to assure only Walmart events were chosen.

2. Provide a table that provides the region for each sales_rep along with their associated accounts. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.

3. Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. Your final table should have 3 columns: region name, account name, and unit price. A few accounts have 0 for total, so I divided by (total + 0.01) to assure not dividing by zero.

-- Query 1
SELECT a.primary_poc, w.occurred_at, w.channel, a.name
FROM web_events w
JOIN accounts a
ON w.account_id = a.id
WHERE a.name = 'Walmart';

-- Query 2
SELECT
    r.name AS regioname, 
    s.name AS salesrep, 
    a.name AS acctname
FROM region r
	JOIN sales_reps s
	ON r.id = s.region_id
		JOIN accounts a
		ON s.id = a.sales_rep_id
ORDER BY a.name ASC; 

-- Query 3


---- LEFT and RIGHT JOINs
-- ps. LEFT and RIGHT tables are interchangeble -> Common practice to use LEFT JOIN only, and switch positions between tables that you want to compare

Notice each of these new JOIN statements pulls all the same rows as an INNER JOIN, which you saw by just using JOIN, but they also potentially pull some additional rows.

If there is not matching information in the JOINed table, then you will have columns with empty cells. These empty cells introduce a new data type called NULL. You will learn about NULLs in detail in the next lesson, but for now you have a quick introduction as you can consider any cell without data as NULL.

Quick Note: You might see the SQL syntax of "LEFT OUTER JOIN" or "RIGHT OUTER JOIN".
These are the exact same commands as the LEFT JOIN and RIGHT JOIN we learned about in the previous video.

OUTER JOIN: The last type of join is a full outer join. This will return the inner join result set, as well as any unmatched rows from either of the two tables being joined. Again this returns rows that do not match one another from the two tables. The use cases for a full outer join are very rare. Similar to the above, you might see the language FULL OUTER JOIN, which is the same as OUTER JOIN.










