-------- Part: Basic SQL

---- LIMIT
/*
    Try using LIMIT yourself below by writing a query that displays all the data in the
    occurred_at, account_id, and channel columns of the web_events table, and limits the
    output to only the first 15 rows.
*/

SELECT occurred_at, account_id, channel
FROM  web_events
LIMIT 15



---- ORDER BY
/*
    1. Write a query to return the 10 earliest orders in the orders table. Include the id,
       occurred_at, and total_amt_usd.
    2. Write a query to return the top 5 orders in terms of largest total_amt_usd.
    3. Write a query to return the lowest 20 orders in terms of smallest total_amt_usd.
       Include the id, account_id, and total_amt_usd.
*/
-- Query 1
SELECT id, occurred_at, total_amt_usd
FROM orders
ORDER BY occurred_at ASC
LIMIT 10

-- Query 2
SELECT id, occurred_at, total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC
LIMIT 5

-- Query 3
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd ASC
LIMIT 20



---- ORDER BY multiple columns
1. Write a query that displays the order ID, account ID, and total dollar amount for all the orders, sorted first by the account ID (in ascending order), and then by the total dollar amount (in descending order). 

2. Now write a query that again displays order ID, account ID, and total dollar amount for each order, but this time sorted first by total dollar amount (in descending order), and then by account ID (in ascending order). 

-- Query 1
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY account_id ASC, total_amt_usd DESC;

-- Query 2
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC, account_id ASC;

3. Compare the results of these two queries above. How are the results different when you switch the column you sort on first?
gc: In query #1, all of the orders for each account ID are grouped together, and then within each of those groupings, the orders appear from the greatest order amount to the least. In query #2, since you sorted by the total dollar amount first, the orders appear from greatest to least regardless of which account ID they were from. Then they are sorted by account ID next. (The secondary sorting by account ID is difficult to see here, since only if there were two orders with equal total dollar amounts would there need to be any sorting by account ID.)


---- WHERE
1. Pulls the first 5 rows and all columns from the orders table that have a dollar amount of gloss_amt_usd greater than or equal to 1000.

2. Pulls the first 10 rows and all columns from the orders table that have a total_amt_usd less than 500.

-- Query 1
SELECT *
FROM orders
WHERE gloss_amt_usd >= 1000
LIMIT 5;

-- Query 2
SELECT *
FROM orders
WHERE total_amt_usd < 500
LIMIT 10;


---- WHERE with Non-Numeric Data
1. Filter the accounts table to include the company name, website, and the primary point of contact (primary_poc) just for the Exxon Mobil company in the accounts table.

-- Query 1
SELECT name, website, primary_poc
FROM accounts
WHERE name = 'Exxon Mobil';


---- Arithmetic Operators
	---- Derived Columns

1. Create a column that divides the standard_amt_usd by the standard_qty to find the unit price for standard paper for each order. Limit the results to the first 10 orders, and include the id and account_id fields.

2. Write a query that finds the percentage of revenue that comes from poster paper for each order. You will need to use only the columns that end with _usd. (**Try to do this without using the total column**). Display the id and account_id fields also.
NOTE - you will receive an error with the correct solution to this question. This occurs because at least one of the values in the data creates a division by zero in your formula. You will learn later in the course how to fully handle this issue. For now, you can just limit your calculations to the first 10 orders, as we did in question #1, and you'll avoid that set of data that causes the problem.

-- Query 1
SELECT 
	id, 
	account_id, 
	(standard_amt_usd / standard_qty) AS unitprice_standard
FROM orders
LIMIT 10;

-- Query 2
SELECT
	id, 
	account_id, 
        (poster_amt_usd/(poster_amt_usd+gloss_amt_usd+standard_amt_usd) * 100) AS poster_percentrevenue
FROM orders
LIMIT 10;


---- Introduction to Logical Operators
In the next concepts, you will be learning about Logical Operators. Logical Operators include:

    LIKE This allows you to perform operations similar to using WHERE and =, but for cases when you might not know exactly what you are looking for.

    IN This allows you to perform operations similar to using WHERE and =, but for more than one condition.

    NOT This is used with IN and LIKE to select all of the rows NOT LIKE or NOT IN a certain condition.

    AND & BETWEEN These allow you to combine operations where all combined conditions must be true.

    OR This allows you to combine operations where at least one of the combined conditions must be true.


1. All the companies whose names start with 'C'.

2. All companies whose names contain the string 'one' somewhere in the name.

3. All companies whose names end with 's'.

-- Query 1
SELECT name
FROM accounts
WHERE name LIKE 'C%';

-- Query 2
SELECT name
FROM accounts
WHERE name LIKE '%one%';

-- Query 3
SELECT name
FROM accounts
WHERE name LIKE '%s';


---- IN
1. Use the accounts table to find the account name, primary_poc, and sales_rep_id for Walmart, Target, and Nordstrom.

2. Use the web_events table to find all information regarding individuals who were contacted via the channel of organic or adwords.

-- Query 1
SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name IN ('Walmart', 'Target', 'Nordstrom');

-- Query 2
SELECT *
FROM web_events
WHERE channel  IN ('organic', 'adwords');


---- NOT
Ex. We can pull all of the rows that were excluded from the queries in the previous two concepts with our new operator.

1. Use the accounts table to find the account name, primary poc, and sales rep id for all stores except Walmart, Target, and Nordstrom.

2. Use the web_events table to find all information regarding individuals who were contacted via any method except using organic or adwords methods.

Ex. Use the accounts table to find:

3. All the companies whose names do not start with 'C'.

4. All companies whose names do not contain the string 'one' somewhere in the name.

5. All companies whose names do not end with 's'.

-- Query 1
SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name NOT IN ('Walmart', 'Target', 'Nordstrom');

-- Query 2
SELECT *
FROM web_events
WHERE channel NOT IN ('organic', 'adwords');

-- Query 3
SELECT *
FROM accounts
WHERE name NOT LIKE 'C%';

-- Query 4
SELECT *
FROM accounts
WHERE name NOT LIKE '&one%';

-- Query 5
SELECT *
FROM accounts
WHERE name NOT LIKE '&s';


---- AND and BETWEEN
The AND operator is used within a WHERE statement to consider more than one logical clause at a time. Each time you link a new statement with an AND, you will need to specify the column you are interested in looking at. You may link as many statements as you would like to consider at the same time. This operator works with all of the operations we have seen so far including arithmetic operators (+, *, -, /).* LIKE*,* IN*, and* NOT logic can also be linked together using the AND* operator.
BETWEEN Operator

Sometimes we can make a cleaner statement using BETWEEN than we can using AND. Particularly this is true when we are using the same column for different parts of our AND statement. In the previous video, we probably should have used BETWEEN.
Instead of writing :

	WHERE column >= 6 AND column <= 10

we can instead write, equivalently:

	WHERE column BETWEEN 6 AND 10

1. Write a query that returns all the orders where the standard_qty is over 1000, the poster_qty is 0, and the gloss_qty is 0.

2. Using the accounts table, find all the companies whose names do not start with 'C' and end with 's'.

3. When you use the BETWEEN operator in SQL, do the results include the values of your endpoints, or not? Figure out the answer to this important question by writing a query that displays the order date and gloss_qty data for all orders where gloss_qty is between 24 and 29. Then look at your output to see if the BETWEEN operator included the begin and end values or not.

4. Use the web_events table to find all information regarding individuals who were contacted via the organic or adwords channels, and started their account at any point in 2016, sorted from newest to oldest.

-- Query 1
SELECT *
FROM orders
WHERE 
    standard_qty > 100
AND poster_qty = 0
AND gloss_qty = 0;

-- Query 2
SELECT *
FROM accounts
WHERE
    name NOT LIKE 'C%'
AND name LIKE '%s';

-- Query 3
SELECT *
FROM orders
WHERE gloss_qty BETWEEN 24 AND 29;

-- Query 4
SELECT *
FROM web_events
WHERE 
    channel IN ('organic', 'adwords')
AND occurred_at BETWEEN '2016-01-01' AND '2017-01-01'
ORDER BY occurred_at DESC;


---- OR
Similar to the AND operator, the OR operator can combine multiple statements. Each time you link a new statement with an OR, you will need to specify the column you are interested in looking at. You may link as many statements as you would like to consider at the same time. This operator works with all of the operations we have seen so far including arithmetic operators (+, *, -, /),* LIKE*,* IN*,* NOT*,* AND*, and* BETWEEN logic can all be linked together using the OR* operator.

When combining multiple of these operations, we frequently might need to use parentheses to assure that logic we want to perform is being executed correctly. The video below shows an example of one of these situations.

1. Find list of orders ids where either gloss_qty or poster_qty is greater than 4000. Only include the id field in the resulting table.

2. Write a query that returns a list of orders where the standard_qty is zero and either the gloss_qty or poster_qty is over 1000.

3. Find all the company names that start with a 'C' or 'W', and the primary contact contains 'ana' or 'Ana', but it doesn't contain 'eana'.

-- Query 1
SELECT id
FROM orders
WHERE gloss_qty > 4000 OR poster_qty > 4000;

-- Query 2
SELECT *
FROM orders
WHERE 
     standard_qty = 0
AND (gloss_qty > 4000 OR poster_qty > 4000);

-- Query 3
SELECT *
FROM accounts
WHERE 
    (name LIKE 'C%' OR name LIKE 'W%')
AND (primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%')
AND (primary_poc NOT LIKE '%eana%');















































